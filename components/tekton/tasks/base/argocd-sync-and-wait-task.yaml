apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/displayName: argocd
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: deploy
  labels:
    app.kubernetes.io/version: '0.2'
  name: argocd-task-sync-and-wait
spec:
  description: >-
    This task syncs (deploys) an Argo CD application and waits for it to be
    healthy.

    To do so, it requires the address of the Argo CD server and some form of
    authentication either a username/password or an authentication token.
  params:
    - description: name of the application to sync
      name: application-name
      type: string
    - default: HEAD
      description: the revision to sync to
      name: revision
      type: string
    - default: '--'
      name: flags
      type: string
    - default: v1.7.0
      name: gitops-version
      type: string
    - default: "180"
      name: argo-timeout
      type: string
    - description: name of the deployment to validate the rollout
      name: deployment-name
      type: string
    - description: namespace of the deployment to validate the rollout
      name: deployment-namespace
      type: string
  stepTemplate:
    envFrom:
      - configMapRef:
          name: argocd-env-configmap
      - secretRef:
          name: argocd-env-secret
    name: ''
    resources: {}
  steps:
    - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8:$(params.gitops-version)
      name: login
      resources: {}
      script: >
        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          echo "Logging into argocd"
          yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD";
        fi

        echo "Triggering refresh of $(params.application-name)"

        argocd app get $(params.application-name) --refresh "$(params.flags)"

        echo "Waiting for app to report healthy status"

        argocd app wait "$(params.application-name)" --sync --health --timeout
        "$(params.argo-timeout)" "$(params.flags)"

        if [ -n "$(params.deployment-name)" ]; then
          if [ -n "$(params.deployment-namespace)" ]; then
            echo "Waiting for rollout of $(params.deployment-name) in $(params.deployment-namespace) to complete"
            oc rollout status deployment "$(params.deployment-name)" -n "$(params.deployment-namespace)" --watch
          else
            echo "Waiting for rollout of $(params.deployment-name) to complete"
            oc rollout status deployment "$(params.deployment-name)" --watch
          fi
        fi
